Grammar

    0 $accept: P $end

    1 P: B P
    2  | F P
    3  |

    4 B: IF '(' E ')' S
    5  | WHILE '(' E ')' S
    6  | IF '(' E ')' '{' S '}'
    7  | WHILE '(' E ')' '{' S '}'
    8  | LET ID T ';'
    9  | LET ID T '=' E ';'
   10  | S

   11 T: INT
   12  | BOOLEAN
   13  | STRING

   14 F: F1 '{' C '}'

   15 F1: F2 '(' A ')'

   16 F2: FUNCTION ID H

   17 H: T
   18  | VOID

   19 A: T ID K
   20  | VOID

   21 K: ',' T ID K
   22  |

   23 C: B C
   24  |

   25 E: E EQ_OP U
   26  | U

   27 U: U '+' V
   28  | V

   29 V: '!' W
   30  | W

   31 W: ID
   32  | '(' E ')'
   33  | ID '(' L ')'
   34  | ENTERO
   35  | CADENA

   36 S: ID '=' E ';'
   37  | ID ADD_OP E ';'
   38  | ID '(' L ')' ';'
   39  | PUT E ';'
   40  | GET ID ';'
   41  | RETURN Z ';'

   42 L: E Q
   43  |

   44 Q: ',' E Q
   45  |

   46 Z: E
   47  |


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 29
    '(' (40) 4 5 6 7 15 32 33 38
    ')' (41) 4 5 6 7 15 32 33 38
    '+' (43) 27
    ',' (44) 21 44
    ';' (59) 8 9 36 37 38 39 40 41
    '=' (61) 9 36
    '{' (123) 6 7 14
    '}' (125) 6 7 14
    error (256)
    ID (258) 8 9 16 19 21 31 33 36 37 38 40
    ENTERO (259) 34
    CADENA (260) 35
    INT (261) 11
    BOOLEAN (262) 12
    STRING (263) 13
    VOID (264) 18 20
    IF (265) 4 6
    WHILE (266) 5 7
    LET (267) 8 9
    PUT (268) 39
    GET (269) 40
    RETURN (270) 41
    EQ_OP (271) 25
    ADD_OP (272) 37
    FUNCTION (273) 16
    FinDeFichero (274)


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    P (30)
        on left: 1 2 3
        on right: 0 1 2
    B (31)
        on left: 4 5 6 7 8 9 10
        on right: 1 23
    T (32)
        on left: 11 12 13
        on right: 8 9 17 19 21
    F (33)
        on left: 14
        on right: 2
    F1 (34)
        on left: 15
        on right: 14
    F2 (35)
        on left: 16
        on right: 15
    H (36)
        on left: 17 18
        on right: 16
    A (37)
        on left: 19 20
        on right: 15
    K (38)
        on left: 21 22
        on right: 19 21
    C (39)
        on left: 23 24
        on right: 14 23
    E (40)
        on left: 25 26
        on right: 4 5 6 7 9 25 32 36 37 39 42 44 46
    U (41)
        on left: 27 28
        on right: 25 26 27
    V (42)
        on left: 29 30
        on right: 27 28
    W (43)
        on left: 31 32 33 34 35
        on right: 29 30
    S (44)
        on left: 36 37 38 39 40 41
        on right: 4 5 6 7 10
    L (45)
        on left: 42 43
        on right: 33 38
    Q (46)
        on left: 44 45
        on right: 42 44
    Z (47)
        on left: 46 47
        on right: 41


State 0

    0 $accept: • P $end

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    WHILE     shift, and go to state 3
    LET       shift, and go to state 4
    PUT       shift, and go to state 5
    GET       shift, and go to state 6
    RETURN    shift, and go to state 7
    FUNCTION  shift, and go to state 8

    $default  reduce using rule 3 (P)

    P   go to state 9
    B   go to state 10
    F   go to state 11
    F1  go to state 12
    F2  go to state 13
    S   go to state 14


State 1

   36 S: ID • '=' E ';'
   37  | ID • ADD_OP E ';'
   38  | ID • '(' L ')' ';'

    ADD_OP  shift, and go to state 15
    '('     shift, and go to state 16
    '='     shift, and go to state 17


State 2

    4 B: IF • '(' E ')' S
    6  | IF • '(' E ')' '{' S '}'

    '('  shift, and go to state 18


State 3

    5 B: WHILE • '(' E ')' S
    7  | WHILE • '(' E ')' '{' S '}'

    '('  shift, and go to state 19


State 4

    8 B: LET • ID T ';'
    9  | LET • ID T '=' E ';'

    ID  shift, and go to state 20


State 5

   39 S: PUT • E ';'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 26
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 6

   40 S: GET • ID ';'

    ID  shift, and go to state 30


State 7

   41 S: RETURN • Z ';'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    $default  reduce using rule 47 (Z)

    E  go to state 31
    U  go to state 27
    V  go to state 28
    W  go to state 29
    Z  go to state 32


State 8

   16 F2: FUNCTION • ID H

    ID  shift, and go to state 33


State 9

    0 $accept: P • $end

    $end  shift, and go to state 34


State 10

    1 P: B • P

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    WHILE     shift, and go to state 3
    LET       shift, and go to state 4
    PUT       shift, and go to state 5
    GET       shift, and go to state 6
    RETURN    shift, and go to state 7
    FUNCTION  shift, and go to state 8

    $default  reduce using rule 3 (P)

    P   go to state 35
    B   go to state 10
    F   go to state 11
    F1  go to state 12
    F2  go to state 13
    S   go to state 14


State 11

    2 P: F • P

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    WHILE     shift, and go to state 3
    LET       shift, and go to state 4
    PUT       shift, and go to state 5
    GET       shift, and go to state 6
    RETURN    shift, and go to state 7
    FUNCTION  shift, and go to state 8

    $default  reduce using rule 3 (P)

    P   go to state 36
    B   go to state 10
    F   go to state 11
    F1  go to state 12
    F2  go to state 13
    S   go to state 14


State 12

   14 F: F1 • '{' C '}'

    '{'  shift, and go to state 37


State 13

   15 F1: F2 • '(' A ')'

    '('  shift, and go to state 38


State 14

   10 B: S •

    $default  reduce using rule 10 (B)


State 15

   37 S: ID ADD_OP • E ';'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 39
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 16

   38 S: ID '(' • L ')' ';'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    $default  reduce using rule 43 (L)

    E  go to state 40
    U  go to state 27
    V  go to state 28
    W  go to state 29
    L  go to state 41


State 17

   36 S: ID '=' • E ';'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 42
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 18

    4 B: IF '(' • E ')' S
    6  | IF '(' • E ')' '{' S '}'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 43
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 19

    5 B: WHILE '(' • E ')' S
    7  | WHILE '(' • E ')' '{' S '}'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 44
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 20

    8 B: LET ID • T ';'
    9  | LET ID • T '=' E ';'

    INT      shift, and go to state 45
    BOOLEAN  shift, and go to state 46
    STRING   shift, and go to state 47

    T  go to state 48


State 21

   31 W: ID •
   33  | ID • '(' L ')'

    '('  shift, and go to state 49

    $default  reduce using rule 31 (W)


State 22

   34 W: ENTERO •

    $default  reduce using rule 34 (W)


State 23

   35 W: CADENA •

    $default  reduce using rule 35 (W)


State 24

   32 W: '(' • E ')'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 50
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 25

   29 V: '!' • W

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24

    W  go to state 51


State 26

   25 E: E • EQ_OP U
   39 S: PUT E • ';'

    EQ_OP  shift, and go to state 52
    ';'    shift, and go to state 53


State 27

   26 E: U •
   27 U: U • '+' V

    '+'  shift, and go to state 54

    $default  reduce using rule 26 (E)


State 28

   28 U: V •

    $default  reduce using rule 28 (U)


State 29

   30 V: W •

    $default  reduce using rule 30 (V)


State 30

   40 S: GET ID • ';'

    ';'  shift, and go to state 55


State 31

   25 E: E • EQ_OP U
   46 Z: E •

    EQ_OP  shift, and go to state 52

    $default  reduce using rule 46 (Z)


State 32

   41 S: RETURN Z • ';'

    ';'  shift, and go to state 56


State 33

   16 F2: FUNCTION ID • H

    INT      shift, and go to state 45
    BOOLEAN  shift, and go to state 46
    STRING   shift, and go to state 47
    VOID     shift, and go to state 57

    T  go to state 58
    H  go to state 59


State 34

    0 $accept: P $end •

    $default  accept


State 35

    1 P: B P •

    $default  reduce using rule 1 (P)


State 36

    2 P: F P •

    $default  reduce using rule 2 (P)


State 37

   14 F: F1 '{' • C '}'

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    LET     shift, and go to state 4
    PUT     shift, and go to state 5
    GET     shift, and go to state 6
    RETURN  shift, and go to state 7

    $default  reduce using rule 24 (C)

    B  go to state 60
    C  go to state 61
    S  go to state 14


State 38

   15 F1: F2 '(' • A ')'

    INT      shift, and go to state 45
    BOOLEAN  shift, and go to state 46
    STRING   shift, and go to state 47
    VOID     shift, and go to state 62

    T  go to state 63
    A  go to state 64


State 39

   25 E: E • EQ_OP U
   37 S: ID ADD_OP E • ';'

    EQ_OP  shift, and go to state 52
    ';'    shift, and go to state 65


State 40

   25 E: E • EQ_OP U
   42 L: E • Q

    EQ_OP  shift, and go to state 52
    ','    shift, and go to state 66

    $default  reduce using rule 45 (Q)

    Q  go to state 67


State 41

   38 S: ID '(' L • ')' ';'

    ')'  shift, and go to state 68


State 42

   25 E: E • EQ_OP U
   36 S: ID '=' E • ';'

    EQ_OP  shift, and go to state 52
    ';'    shift, and go to state 69


State 43

    4 B: IF '(' E • ')' S
    6  | IF '(' E • ')' '{' S '}'
   25 E: E • EQ_OP U

    EQ_OP  shift, and go to state 52
    ')'    shift, and go to state 70


State 44

    5 B: WHILE '(' E • ')' S
    7  | WHILE '(' E • ')' '{' S '}'
   25 E: E • EQ_OP U

    EQ_OP  shift, and go to state 52
    ')'    shift, and go to state 71


State 45

   11 T: INT •

    $default  reduce using rule 11 (T)


State 46

   12 T: BOOLEAN •

    $default  reduce using rule 12 (T)


State 47

   13 T: STRING •

    $default  reduce using rule 13 (T)


State 48

    8 B: LET ID T • ';'
    9  | LET ID T • '=' E ';'

    ';'  shift, and go to state 72
    '='  shift, and go to state 73


State 49

   33 W: ID '(' • L ')'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    $default  reduce using rule 43 (L)

    E  go to state 40
    U  go to state 27
    V  go to state 28
    W  go to state 29
    L  go to state 74


State 50

   25 E: E • EQ_OP U
   32 W: '(' E • ')'

    EQ_OP  shift, and go to state 52
    ')'    shift, and go to state 75


State 51

   29 V: '!' W •

    $default  reduce using rule 29 (V)


State 52

   25 E: E EQ_OP • U

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    U  go to state 76
    V  go to state 28
    W  go to state 29


State 53

   39 S: PUT E ';' •

    $default  reduce using rule 39 (S)


State 54

   27 U: U '+' • V

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    V  go to state 77
    W  go to state 29


State 55

   40 S: GET ID ';' •

    $default  reduce using rule 40 (S)


State 56

   41 S: RETURN Z ';' •

    $default  reduce using rule 41 (S)


State 57

   18 H: VOID •

    $default  reduce using rule 18 (H)


State 58

   17 H: T •

    $default  reduce using rule 17 (H)


State 59

   16 F2: FUNCTION ID H •

    $default  reduce using rule 16 (F2)


State 60

   23 C: B • C

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    LET     shift, and go to state 4
    PUT     shift, and go to state 5
    GET     shift, and go to state 6
    RETURN  shift, and go to state 7

    $default  reduce using rule 24 (C)

    B  go to state 60
    C  go to state 78
    S  go to state 14


State 61

   14 F: F1 '{' C • '}'

    '}'  shift, and go to state 79


State 62

   20 A: VOID •

    $default  reduce using rule 20 (A)


State 63

   19 A: T • ID K

    ID  shift, and go to state 80


State 64

   15 F1: F2 '(' A • ')'

    ')'  shift, and go to state 81


State 65

   37 S: ID ADD_OP E ';' •

    $default  reduce using rule 37 (S)


State 66

   44 Q: ',' • E Q

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 82
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 67

   42 L: E Q •

    $default  reduce using rule 42 (L)


State 68

   38 S: ID '(' L ')' • ';'

    ';'  shift, and go to state 83


State 69

   36 S: ID '=' E ';' •

    $default  reduce using rule 36 (S)


State 70

    4 B: IF '(' E ')' • S
    6  | IF '(' E ')' • '{' S '}'

    ID      shift, and go to state 1
    PUT     shift, and go to state 5
    GET     shift, and go to state 6
    RETURN  shift, and go to state 7
    '{'     shift, and go to state 84

    S  go to state 85


State 71

    5 B: WHILE '(' E ')' • S
    7  | WHILE '(' E ')' • '{' S '}'

    ID      shift, and go to state 1
    PUT     shift, and go to state 5
    GET     shift, and go to state 6
    RETURN  shift, and go to state 7
    '{'     shift, and go to state 86

    S  go to state 87


State 72

    8 B: LET ID T ';' •

    $default  reduce using rule 8 (B)


State 73

    9 B: LET ID T '=' • E ';'

    ID      shift, and go to state 21
    ENTERO  shift, and go to state 22
    CADENA  shift, and go to state 23
    '('     shift, and go to state 24
    '!'     shift, and go to state 25

    E  go to state 88
    U  go to state 27
    V  go to state 28
    W  go to state 29


State 74

   33 W: ID '(' L • ')'

    ')'  shift, and go to state 89


State 75

   32 W: '(' E ')' •

    $default  reduce using rule 32 (W)


State 76

   25 E: E EQ_OP U •
   27 U: U • '+' V

    '+'  shift, and go to state 54

    $default  reduce using rule 25 (E)


State 77

   27 U: U '+' V •

    $default  reduce using rule 27 (U)


State 78

   23 C: B C •

    $default  reduce using rule 23 (C)


State 79

   14 F: F1 '{' C '}' •

    $default  reduce using rule 14 (F)


State 80

   19 A: T ID • K

    ','  shift, and go to state 90

    $default  reduce using rule 22 (K)

    K  go to state 91


State 81

   15 F1: F2 '(' A ')' •

    $default  reduce using rule 15 (F1)


State 82

   25 E: E • EQ_OP U
   44 Q: ',' E • Q

    EQ_OP  shift, and go to state 52
    ','    shift, and go to state 66

    $default  reduce using rule 45 (Q)

    Q  go to state 92


State 83

   38 S: ID '(' L ')' ';' •

    $default  reduce using rule 38 (S)


State 84

    6 B: IF '(' E ')' '{' • S '}'

    ID      shift, and go to state 1
    PUT     shift, and go to state 5
    GET     shift, and go to state 6
    RETURN  shift, and go to state 7

    S  go to state 93


State 85

    4 B: IF '(' E ')' S •

    $default  reduce using rule 4 (B)


State 86

    7 B: WHILE '(' E ')' '{' • S '}'

    ID      shift, and go to state 1
    PUT     shift, and go to state 5
    GET     shift, and go to state 6
    RETURN  shift, and go to state 7

    S  go to state 94


State 87

    5 B: WHILE '(' E ')' S •

    $default  reduce using rule 5 (B)


State 88

    9 B: LET ID T '=' E • ';'
   25 E: E • EQ_OP U

    EQ_OP  shift, and go to state 52
    ';'    shift, and go to state 95


State 89

   33 W: ID '(' L ')' •

    $default  reduce using rule 33 (W)


State 90

   21 K: ',' • T ID K

    INT      shift, and go to state 45
    BOOLEAN  shift, and go to state 46
    STRING   shift, and go to state 47

    T  go to state 96


State 91

   19 A: T ID K •

    $default  reduce using rule 19 (A)


State 92

   44 Q: ',' E Q •

    $default  reduce using rule 44 (Q)


State 93

    6 B: IF '(' E ')' '{' S • '}'

    '}'  shift, and go to state 97


State 94

    7 B: WHILE '(' E ')' '{' S • '}'

    '}'  shift, and go to state 98


State 95

    9 B: LET ID T '=' E ';' •

    $default  reduce using rule 9 (B)


State 96

   21 K: ',' T • ID K

    ID  shift, and go to state 99


State 97

    6 B: IF '(' E ')' '{' S '}' •

    $default  reduce using rule 6 (B)


State 98

    7 B: WHILE '(' E ')' '{' S '}' •

    $default  reduce using rule 7 (B)


State 99

   21 K: ',' T ID • K

    ','  shift, and go to state 90

    $default  reduce using rule 22 (K)

    K  go to state 100


State 100

   21 K: ',' T ID K •

    $default  reduce using rule 21 (K)
