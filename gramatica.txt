Terminals unused in grammar

    ENTERO
    CADENA
    IF
    WHILE
    LET
    PUT
    GET
    RETURN
    EQ_OP
    ADD_OP


Rules useless in parser due to conflicts

   15 K: ',' T ID K
   16  | ε


State 22 conflicts: 1 reduce/reduce
State 26 conflicts: 1 reduce/reduce
State 27 conflicts: 1 reduce/reduce


Grammar

    0 $accept: P $end

    1 P: F P
    2  | ε

    3 F: F1 '{' '}'

    4 F1: F2 '(' A ')'

    5 F2: FUNCTION ID H

    6 H: T
    7  | VOID

    8 A: T ID K
    9  | VOID

   10 K: ',' T ID K
   11  | ε

   12 T: INT
   13  | BOOLEAN
   14  | STRING

   15 K: ',' T ID K
   16  | ε


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 4
    ')' (41) 4
    ',' (44) 10 15
    '{' (123) 3
    '}' (125) 3
    error (256)
    ID (258) 5 8 10 15
    ENTERO (259)
    CADENA (260)
    INT (261) 12
    BOOLEAN (262) 13
    STRING (263) 14
    VOID (264) 7 9
    IF (265)
    WHILE (266)
    LET (267)
    PUT (268)
    GET (269)
    RETURN (270)
    EQ_OP (271)
    ADD_OP (272)
    FUNCTION (273) 5


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    P (25)
        on left: 1 2
        on right: 0 1
    F (26)
        on left: 3
        on right: 1
    F1 (27)
        on left: 4
        on right: 3
    F2 (28)
        on left: 5
        on right: 4
    H (29)
        on left: 6 7
        on right: 5
    A (30)
        on left: 8 9
        on right: 4
    K (31)
        on left: 10 11 15 16
        on right: 8 10 15
    T (32)
        on left: 12 13 14
        on right: 6 8 10 15


State 0

    0 $accept: • P $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (P)

    P   go to state 2
    F   go to state 3
    F1  go to state 4
    F2  go to state 5


State 1

    5 F2: FUNCTION • ID H

    ID  shift, and go to state 6


State 2

    0 $accept: P • $end

    $end  shift, and go to state 7


State 3

    1 P: F • P

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (P)

    P   go to state 8
    F   go to state 3
    F1  go to state 4
    F2  go to state 5


State 4

    3 F: F1 • '{' '}'

    '{'  shift, and go to state 9


State 5

    4 F1: F2 • '(' A ')'

    '('  shift, and go to state 10


State 6

    5 F2: FUNCTION ID • H

    INT      shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    STRING   shift, and go to state 13
    VOID     shift, and go to state 14

    H  go to state 15
    T  go to state 16


State 7

    0 $accept: P $end •

    $default  accept


State 8

    1 P: F P •

    $default  reduce using rule 1 (P)


State 9

    3 F: F1 '{' • '}'

    '}'  shift, and go to state 17


State 10

    4 F1: F2 '(' • A ')'

    INT      shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    STRING   shift, and go to state 13
    VOID     shift, and go to state 18

    A  go to state 19
    T  go to state 20


State 11

   12 T: INT •

    $default  reduce using rule 12 (T)


State 12

   13 T: BOOLEAN •

    $default  reduce using rule 13 (T)


State 13

   14 T: STRING •

    $default  reduce using rule 14 (T)


State 14

    7 H: VOID •

    $default  reduce using rule 7 (H)


State 15

    5 F2: FUNCTION ID H •

    $default  reduce using rule 5 (F2)


State 16

    6 H: T •

    $default  reduce using rule 6 (H)


State 17

    3 F: F1 '{' '}' •

    $default  reduce using rule 3 (F)


State 18

    9 A: VOID •

    $default  reduce using rule 9 (A)


State 19

    4 F1: F2 '(' A • ')'

    ')'  shift, and go to state 21


State 20

    8 A: T • ID K

    ID  shift, and go to state 22


State 21

    4 F1: F2 '(' A ')' •

    $default  reduce using rule 4 (F1)


State 22

    8 A: T ID • K

    ','  shift, and go to state 23

    ')'       reduce using rule 11 (K)
    ')'       [reduce using rule 16 (K)]
    $default  reduce using rule 11 (K)

    K  go to state 24


State 23

   10 K: ',' • T ID K
   15  | ',' • T ID K

    INT      shift, and go to state 11
    BOOLEAN  shift, and go to state 12
    STRING   shift, and go to state 13

    T  go to state 25


State 24

    8 A: T ID K •

    $default  reduce using rule 8 (A)


State 25

   10 K: ',' T • ID K
   15  | ',' T • ID K

    ID  shift, and go to state 26


State 26

   10 K: ',' T ID • K
   15  | ',' T ID • K

    ','  shift, and go to state 23

    ')'       reduce using rule 11 (K)
    ')'       [reduce using rule 16 (K)]
    $default  reduce using rule 11 (K)

    K  go to state 27


State 27

   10 K: ',' T ID K •
   15  | ',' T ID K •

    ')'       reduce using rule 10 (K)
    ')'       [reduce using rule 15 (K)]
    $default  reduce using rule 10 (K)
